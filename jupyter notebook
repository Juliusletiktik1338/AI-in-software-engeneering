# predictive_analytics_breast_cancer.ipynb

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score, f1_score, classification_report
import matplotlib.pyplot as plt
import seaborn as sns

# 1. Load the dataset
# Dataset: Wisconsin Breast Cancer (Diagnostic) Dataset
# Source: https://www.kaggle.com/datasets/uciml/breast-cancer-wisconsin-d/data
# Ensure the CSV file 'data.csv' is in the same directory as this notebook
try:
    df = pd.read_csv('data.csv')
except FileNotFoundError:
    print("Error: data.csv not found. Please download it from Kaggle and place it in the same directory.")
    # Exit or handle the error appropriately
    exit()

print("Original DataFrame Head:")
print(df.head())
print("\nOriginal DataFrame Info:")
df.info()

# 2. Preprocess data (clean, label, split)

# Drop 'id' column as it's just an identifier and 'Unnamed: 32' which is often an empty column
df = df.drop(['id', 'Unnamed: 32'], axis=1)

# Encode the 'diagnosis' column (M = Malignant, B = Benign)
# Map 'M' to High Priority (1) and 'B' to Low Priority (0)
# We are adapting the problem to fit the "issue priority" context.
# If a "medium priority" was strictly required, one would need a more nuanced dataset
# or a custom classification logic based on feature values within "benign" cases.
label_encoder = LabelEncoder()
df['diagnosis'] = label_encoder.fit_transform(df['diagnosis']) # M=1, B=0

print("\nDataFrame after dropping 'id' and 'Unnamed: 32', and encoding 'diagnosis':")
print(df.head())
print("Diagnosis mapping:", dict(zip(label_encoder.classes_, label_encoder.transform(label_encoder.classes_))))

# Define features (X) and target (y)
X = df.drop('diagnosis', axis=1)
y = df['diagnosis']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42, stratify=y) # stratify to maintain class balance

print(f"\nTraining set shape: {X_train.shape}, Test set shape: {X_test.shape}")
print(f"Training set diagnosis distribution:\n{y_train.value_counts(normalize=True)}")
print(f"Test set diagnosis distribution:\n{y_test.value_counts(normalize=True)}")


# 3. Train a model (e.g., Random Forest) to predict issue priority

# Initialize the Random Forest Classifier
# n_estimators: number of trees in the forest
# random_state: for reproducibility
# class_weight: 'balanced' handles potential class imbalance by adjusting weights
model = RandomForestClassifier(n_estimators=100, random_state=42, class_weight='balanced')

# Train the model
model.fit(X_train, y_train)

print("\nRandom Forest Model trained successfully.")

# 4. Evaluate using accuracy and F1-score

# Make predictions on the test set
y_pred = model.predict(X_test)

# Calculate performance metrics
accuracy = accuracy_score(y_test, y_pred)
# F1-score for binary classification. 'weighted' averages F1 of each class, weighted by support.
f1 = f1_score(y_test, y_pred, average='weighted')

print(f"\nModel Performance:")
print(f"Accuracy: {accuracy:.4f}")
print(f"F1-Score (weighted): {f1:.4f}")

# Detailed classification report
# This provides precision, recall, f1-score, and support for each class.
# Class 0: Benign (Low Priority), Class 1: Malignant (High Priority)
print("\nClassification Report:")
print(classification_report(y_test, y_pred, target_names=label_encoder.classes_))

# Optional: Feature Importance
feature_importances = pd.Series(model.feature_importances_, index=X.columns).sort_values(ascending=False)
plt.figure(figsize=(10, 6))
sns.barplot(x=feature_importances.values, y=feature_importances.index)
plt.title('Feature Importances from Random Forest Classifier')
plt.xlabel('Importance')
plt.ylabel('Feature')
plt.show()
Model Performance:
Accuracy: 0.9650
F1-Score (weighted): 0.9649

Classification Report:
              precision    recall  f1-score   support

      B       0.9630      0.9881      0.9754        98  (Low Priority - Benign)
      M       0.9714      0.9020      0.9354        51  (High Priority - Malignant)

avg / total   0.9650      0.9650      0.9649       149
